export const handlePressMenu = (menuOpen, setMenuOpen) => () => {
  setMenuOpen(!menuOpen);
};

export const countInputWord = (setWordCount) => (event) => {
  const text = event.target.value;
  setWordCount(text.length);
};

export const handleInput = (e, setText, textareaRef) => {
  const value = e.target.value;
  if (value.length <= 200) {
    setText(value);
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "auto";
      textarea.style.height = textarea.scrollHeight + "px";
    }
  }
};

export const handleFetchTrendingTopics = async (
  authFetch,
  setTrendingTopics,
  setShowTrendingPopup,
  setIsLoadingTrending
) => {
  try {
    setIsLoadingTrending(true);
    const res = await authFetch("/api/generators/topic/trending");
    setTrendingTopics(res);
    setShowTrendingPopup(true);
  } catch (err) {
    console.error("L·ªói khi g·ªçi API trending topics:", err.message);
  } finally {
    setIsLoadingTrending(false);
  }
};

export const handleFetchSuggestedTopics = async (
  text,
  authFetch,
  setSuggestedTopics,
  setShowSuggestedPopup,
  setIsLoadingSuggested
) => {
  if (!text.trim()) {
    alert("Please enter a topic before fetching suggestions.");
    return;
  }

  try {
    setIsLoadingSuggested(true);
    const res = await authFetch(
      `/api/generators/topic/suggestions?query=${encodeURIComponent(text)}`
    );
    setSuggestedTopics(res);
    setShowSuggestedPopup(true);
  } catch (err) {
    console.error("L·ªói khi g·ªçi API suggested topics:", err.message);
  } finally {
    setIsLoadingSuggested(false);
  }
};
export const handleGenerateScript = async (
  text,
  authFetch,
  setGeneratedScript,
  setShowScriptArea,
  setScriptError,
  setVideoId // C√≥ th·ªÉ b·ªè lu√¥n n·∫øu kh√¥ng d√πng n·ªØa
) => {
  if (!text.trim()) {
    alert("Please enter a topic before generating script.");
    return false;
  }

  try {
    // G·ªçi API sinh script t·ª´ topic
    const scriptRes = await authFetch("/api/generators/script", {
      method: "POST",
      body: JSON.stringify({ topic: text }),
    });

    const script = typeof scriptRes === "string" ? scriptRes : scriptRes.script;

    console.log("üì• Script API response:", scriptRes);
    // C·∫≠p nh·∫≠t giao di·ªán
    setGeneratedScript(script);
    setShowScriptArea(true);
    setScriptError(false);

    return true;
  } catch (error) {
    console.error("L·ªói khi sinh script:", error.message);
    alert("ƒê√£ x·∫£y ra l·ªói khi t·∫°o script. H√£y th·ª≠ l·∫°i.");
    return false;
  }
};

// H√†m n√†y s·∫Ω g·ªçi API ƒë·ªÉ sinh voice t·ª´ script ƒë√£ t·∫°o
export const handleGenerateVoice = async (
  generatedScript,
  setVoiceUrl,
  setIsLoadingVoice
) => {
  const token = sessionStorage.getItem("token");
  if (!token) {
    alert("Token kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    return;
  }

  setIsLoadingVoice(true);
  setVoiceUrl("");

  console.log("üì§ G·ª≠i script ƒë·∫øn API voice:", generatedScript);
  // Gi·∫£ s·ª≠ nh·∫≠n voice_url t·ª´ backend
  const voice_url =
    "https://res.cloudinary.com/df8meqyyc/video/upload/v1750859823/tts-audio/qfv6ryugzwx5hlqltvgz.mp3";
  console.log("üì• Nh·∫≠n voice_url:", voice_url);
  setVoiceUrl(voice_url);
  setIsLoadingVoice(false);

  // ------------- Ch∆∞a d√πng ƒë∆∞·ª£c API (Thi·∫øu secret key) -------------
  // N·∫øu backend ƒë√£ s·∫µn s√†ng, c√≥ th·ªÉ b·ªè comment ƒëo·∫°n n√†y ƒë·ªÉ g·ªçi API

  // try {
  //   const res = await fetch("/api/generators/voice", {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //       Authorization: `Bearer ${token}`,
  //     },
  //     body: JSON.stringify({ script: generatedScript }), // ‚úÖ ƒë√∫ng format backend y√™u c·∫ßu
  //   });

  //   if (!res.ok) {
  //     const err = await res.json();
  //     throw new Error(err?.error || "L·ªói khi g·ªçi API voice.");
  //   }

  //   const data = await res.json();
  //   console.log("üì• Voice API response:", data);

  //   if (data.voice_url) {
  //     setVoiceUrl(data.voice_url);
  //   } else {
  //     console.warn("‚ö†Ô∏è Kh√¥ng c√≥ voice_url trong response:", data);
  //     alert("Kh√¥ng t√¨m th·∫•y voice_url trong ph·∫£n h·ªìi.");
  //   }
  // } catch (error) {
  //   console.error("Voice generation error:", error.message);
  //   alert("ƒê√£ x·∫£y ra l·ªói khi g·ªçi API voice.");
  // } finally {
  //   setIsLoadingVoice(false);
  // }
};

// H√†m n√†y s·∫Ω g·ªçi API ƒë·ªÉ sinh video t·ª´ voice ƒë√£ t·∫°o
// scripts/home.js
export const handleGenerateVideo = async (
  videoId,
  authFetch,
  setVideoUrl,
  setIsLoadingVideo
) => {
  // // if (!videoId) return;
  // if (!videoId || videoId.trim() === "") {
  //   alert("Please provide a valid video ID.");
  //   return;
  // }

  setIsLoadingVideo(true);
  setVideoUrl("");

  // Gi·∫£ s·ª≠ nh·∫≠n video_url t·ª´ backend
  const videoUrl =
    "https://res.cloudinary.com/dznocieoi/video/upload/v1751044595/video_utej9c.mp4";
  const videoUrl2 =
    "https://res.cloudinary.com/dznocieoi/video/upload/v1751080891/videoplayback_rgkq72.mp4";
  console.log("Url video:", videoUrl, videoUrl2);
  setVideoUrl(videoUrl2);
  setIsLoadingVideo(false);

  // Ch∆∞a d√πng ƒë∆∞·ª£c API (Thi·∫øu videoID)
  // try {
  //   const response = await authFetch("/api/generators/video", {
  //     method: "POST",
  //     headers: { "Content-Type": "application/json" },
  //     body: JSON.stringify({ video_id: videoId }),
  //   });

  //   if (!response.ok) throw new Error("Video generation failed");

  //   const data = await response.json();
  //   setVideoUrl(data.video_url); //  Backend tr·∫£ v·ªÅ `video_url` trong `VideoDTO`
  // } catch (err) {
  //   console.error("Video generation error:", err);
  // } finally {
  //   setIsLoadingVideo(false);
  // }
};
